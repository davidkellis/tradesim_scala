/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package dke.tradesim.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CashDividendPayment implements org.apache.thrift.TBase<CashDividendPayment, CashDividendPayment._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CashDividendPayment");

  private static final org.apache.thrift.protocol.TField SYMBOL_FIELD_DESC = new org.apache.thrift.protocol.TField("symbol", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EX_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("exDate", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField PAYABLE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("payableDate", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField AMOUNT_PER_SHARE_FIELD_DESC = new org.apache.thrift.protocol.TField("amountPerShare", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ADJUSTMENT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("adjustmentTime", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField SHARE_QTY_FIELD_DESC = new org.apache.thrift.protocol.TField("shareQty", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("total", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CashDividendPaymentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CashDividendPaymentTupleSchemeFactory());
  }

  public String symbol; // required
  public long exDate; // required
  public long payableDate; // optional
  public String amountPerShare; // required
  public long adjustmentTime; // required
  public long shareQty; // required
  public String total; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SYMBOL((short)1, "symbol"),
    EX_DATE((short)2, "exDate"),
    PAYABLE_DATE((short)3, "payableDate"),
    AMOUNT_PER_SHARE((short)4, "amountPerShare"),
    ADJUSTMENT_TIME((short)5, "adjustmentTime"),
    SHARE_QTY((short)6, "shareQty"),
    TOTAL((short)7, "total");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SYMBOL
          return SYMBOL;
        case 2: // EX_DATE
          return EX_DATE;
        case 3: // PAYABLE_DATE
          return PAYABLE_DATE;
        case 4: // AMOUNT_PER_SHARE
          return AMOUNT_PER_SHARE;
        case 5: // ADJUSTMENT_TIME
          return ADJUSTMENT_TIME;
        case 6: // SHARE_QTY
          return SHARE_QTY;
        case 7: // TOTAL
          return TOTAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXDATE_ISSET_ID = 0;
  private static final int __PAYABLEDATE_ISSET_ID = 1;
  private static final int __ADJUSTMENTTIME_ISSET_ID = 2;
  private static final int __SHAREQTY_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.PAYABLE_DATE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SYMBOL, new org.apache.thrift.meta_data.FieldMetaData("symbol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EX_DATE, new org.apache.thrift.meta_data.FieldMetaData("exDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PAYABLE_DATE, new org.apache.thrift.meta_data.FieldMetaData("payableDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AMOUNT_PER_SHARE, new org.apache.thrift.meta_data.FieldMetaData("amountPerShare", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADJUSTMENT_TIME, new org.apache.thrift.meta_data.FieldMetaData("adjustmentTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SHARE_QTY, new org.apache.thrift.meta_data.FieldMetaData("shareQty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL, new org.apache.thrift.meta_data.FieldMetaData("total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CashDividendPayment.class, metaDataMap);
  }

  public CashDividendPayment() {
  }

  public CashDividendPayment(
    String symbol,
    long exDate,
    String amountPerShare,
    long adjustmentTime,
    long shareQty,
    String total)
  {
    this();
    this.symbol = symbol;
    this.exDate = exDate;
    setExDateIsSet(true);
    this.amountPerShare = amountPerShare;
    this.adjustmentTime = adjustmentTime;
    setAdjustmentTimeIsSet(true);
    this.shareQty = shareQty;
    setShareQtyIsSet(true);
    this.total = total;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CashDividendPayment(CashDividendPayment other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSymbol()) {
      this.symbol = other.symbol;
    }
    this.exDate = other.exDate;
    this.payableDate = other.payableDate;
    if (other.isSetAmountPerShare()) {
      this.amountPerShare = other.amountPerShare;
    }
    this.adjustmentTime = other.adjustmentTime;
    this.shareQty = other.shareQty;
    if (other.isSetTotal()) {
      this.total = other.total;
    }
  }

  public CashDividendPayment deepCopy() {
    return new CashDividendPayment(this);
  }

  @Override
  public void clear() {
    this.symbol = null;
    setExDateIsSet(false);
    this.exDate = 0;
    setPayableDateIsSet(false);
    this.payableDate = 0;
    this.amountPerShare = null;
    setAdjustmentTimeIsSet(false);
    this.adjustmentTime = 0;
    setShareQtyIsSet(false);
    this.shareQty = 0;
    this.total = null;
  }

  public String getSymbol() {
    return this.symbol;
  }

  public CashDividendPayment setSymbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

  public void unsetSymbol() {
    this.symbol = null;
  }

  /** Returns true if field symbol is set (has been assigned a value) and false otherwise */
  public boolean isSetSymbol() {
    return this.symbol != null;
  }

  public void setSymbolIsSet(boolean value) {
    if (!value) {
      this.symbol = null;
    }
  }

  public long getExDate() {
    return this.exDate;
  }

  public CashDividendPayment setExDate(long exDate) {
    this.exDate = exDate;
    setExDateIsSet(true);
    return this;
  }

  public void unsetExDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXDATE_ISSET_ID);
  }

  /** Returns true if field exDate is set (has been assigned a value) and false otherwise */
  public boolean isSetExDate() {
    return EncodingUtils.testBit(__isset_bitfield, __EXDATE_ISSET_ID);
  }

  public void setExDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXDATE_ISSET_ID, value);
  }

  public long getPayableDate() {
    return this.payableDate;
  }

  public CashDividendPayment setPayableDate(long payableDate) {
    this.payableDate = payableDate;
    setPayableDateIsSet(true);
    return this;
  }

  public void unsetPayableDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYABLEDATE_ISSET_ID);
  }

  /** Returns true if field payableDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPayableDate() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYABLEDATE_ISSET_ID);
  }

  public void setPayableDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYABLEDATE_ISSET_ID, value);
  }

  public String getAmountPerShare() {
    return this.amountPerShare;
  }

  public CashDividendPayment setAmountPerShare(String amountPerShare) {
    this.amountPerShare = amountPerShare;
    return this;
  }

  public void unsetAmountPerShare() {
    this.amountPerShare = null;
  }

  /** Returns true if field amountPerShare is set (has been assigned a value) and false otherwise */
  public boolean isSetAmountPerShare() {
    return this.amountPerShare != null;
  }

  public void setAmountPerShareIsSet(boolean value) {
    if (!value) {
      this.amountPerShare = null;
    }
  }

  public long getAdjustmentTime() {
    return this.adjustmentTime;
  }

  public CashDividendPayment setAdjustmentTime(long adjustmentTime) {
    this.adjustmentTime = adjustmentTime;
    setAdjustmentTimeIsSet(true);
    return this;
  }

  public void unsetAdjustmentTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADJUSTMENTTIME_ISSET_ID);
  }

  /** Returns true if field adjustmentTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAdjustmentTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ADJUSTMENTTIME_ISSET_ID);
  }

  public void setAdjustmentTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADJUSTMENTTIME_ISSET_ID, value);
  }

  public long getShareQty() {
    return this.shareQty;
  }

  public CashDividendPayment setShareQty(long shareQty) {
    this.shareQty = shareQty;
    setShareQtyIsSet(true);
    return this;
  }

  public void unsetShareQty() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHAREQTY_ISSET_ID);
  }

  /** Returns true if field shareQty is set (has been assigned a value) and false otherwise */
  public boolean isSetShareQty() {
    return EncodingUtils.testBit(__isset_bitfield, __SHAREQTY_ISSET_ID);
  }

  public void setShareQtyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHAREQTY_ISSET_ID, value);
  }

  public String getTotal() {
    return this.total;
  }

  public CashDividendPayment setTotal(String total) {
    this.total = total;
    return this;
  }

  public void unsetTotal() {
    this.total = null;
  }

  /** Returns true if field total is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal() {
    return this.total != null;
  }

  public void setTotalIsSet(boolean value) {
    if (!value) {
      this.total = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SYMBOL:
      if (value == null) {
        unsetSymbol();
      } else {
        setSymbol((String)value);
      }
      break;

    case EX_DATE:
      if (value == null) {
        unsetExDate();
      } else {
        setExDate((Long)value);
      }
      break;

    case PAYABLE_DATE:
      if (value == null) {
        unsetPayableDate();
      } else {
        setPayableDate((Long)value);
      }
      break;

    case AMOUNT_PER_SHARE:
      if (value == null) {
        unsetAmountPerShare();
      } else {
        setAmountPerShare((String)value);
      }
      break;

    case ADJUSTMENT_TIME:
      if (value == null) {
        unsetAdjustmentTime();
      } else {
        setAdjustmentTime((Long)value);
      }
      break;

    case SHARE_QTY:
      if (value == null) {
        unsetShareQty();
      } else {
        setShareQty((Long)value);
      }
      break;

    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SYMBOL:
      return getSymbol();

    case EX_DATE:
      return Long.valueOf(getExDate());

    case PAYABLE_DATE:
      return Long.valueOf(getPayableDate());

    case AMOUNT_PER_SHARE:
      return getAmountPerShare();

    case ADJUSTMENT_TIME:
      return Long.valueOf(getAdjustmentTime());

    case SHARE_QTY:
      return Long.valueOf(getShareQty());

    case TOTAL:
      return getTotal();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SYMBOL:
      return isSetSymbol();
    case EX_DATE:
      return isSetExDate();
    case PAYABLE_DATE:
      return isSetPayableDate();
    case AMOUNT_PER_SHARE:
      return isSetAmountPerShare();
    case ADJUSTMENT_TIME:
      return isSetAdjustmentTime();
    case SHARE_QTY:
      return isSetShareQty();
    case TOTAL:
      return isSetTotal();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CashDividendPayment)
      return this.equals((CashDividendPayment)that);
    return false;
  }

  public boolean equals(CashDividendPayment that) {
    if (that == null)
      return false;

    boolean this_present_symbol = true && this.isSetSymbol();
    boolean that_present_symbol = true && that.isSetSymbol();
    if (this_present_symbol || that_present_symbol) {
      if (!(this_present_symbol && that_present_symbol))
        return false;
      if (!this.symbol.equals(that.symbol))
        return false;
    }

    boolean this_present_exDate = true;
    boolean that_present_exDate = true;
    if (this_present_exDate || that_present_exDate) {
      if (!(this_present_exDate && that_present_exDate))
        return false;
      if (this.exDate != that.exDate)
        return false;
    }

    boolean this_present_payableDate = true && this.isSetPayableDate();
    boolean that_present_payableDate = true && that.isSetPayableDate();
    if (this_present_payableDate || that_present_payableDate) {
      if (!(this_present_payableDate && that_present_payableDate))
        return false;
      if (this.payableDate != that.payableDate)
        return false;
    }

    boolean this_present_amountPerShare = true && this.isSetAmountPerShare();
    boolean that_present_amountPerShare = true && that.isSetAmountPerShare();
    if (this_present_amountPerShare || that_present_amountPerShare) {
      if (!(this_present_amountPerShare && that_present_amountPerShare))
        return false;
      if (!this.amountPerShare.equals(that.amountPerShare))
        return false;
    }

    boolean this_present_adjustmentTime = true;
    boolean that_present_adjustmentTime = true;
    if (this_present_adjustmentTime || that_present_adjustmentTime) {
      if (!(this_present_adjustmentTime && that_present_adjustmentTime))
        return false;
      if (this.adjustmentTime != that.adjustmentTime)
        return false;
    }

    boolean this_present_shareQty = true;
    boolean that_present_shareQty = true;
    if (this_present_shareQty || that_present_shareQty) {
      if (!(this_present_shareQty && that_present_shareQty))
        return false;
      if (this.shareQty != that.shareQty)
        return false;
    }

    boolean this_present_total = true && this.isSetTotal();
    boolean that_present_total = true && that.isSetTotal();
    if (this_present_total || that_present_total) {
      if (!(this_present_total && that_present_total))
        return false;
      if (!this.total.equals(that.total))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CashDividendPayment other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CashDividendPayment typedOther = (CashDividendPayment)other;

    lastComparison = Boolean.valueOf(isSetSymbol()).compareTo(typedOther.isSetSymbol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSymbol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.symbol, typedOther.symbol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExDate()).compareTo(typedOther.isSetExDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exDate, typedOther.exDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayableDate()).compareTo(typedOther.isSetPayableDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayableDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payableDate, typedOther.payableDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAmountPerShare()).compareTo(typedOther.isSetAmountPerShare());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmountPerShare()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amountPerShare, typedOther.amountPerShare);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdjustmentTime()).compareTo(typedOther.isSetAdjustmentTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdjustmentTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adjustmentTime, typedOther.adjustmentTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShareQty()).compareTo(typedOther.isSetShareQty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareQty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareQty, typedOther.shareQty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal()).compareTo(typedOther.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total, typedOther.total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CashDividendPayment(");
    boolean first = true;

    sb.append("symbol:");
    if (this.symbol == null) {
      sb.append("null");
    } else {
      sb.append(this.symbol);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exDate:");
    sb.append(this.exDate);
    first = false;
    if (isSetPayableDate()) {
      if (!first) sb.append(", ");
      sb.append("payableDate:");
      sb.append(this.payableDate);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("amountPerShare:");
    if (this.amountPerShare == null) {
      sb.append("null");
    } else {
      sb.append(this.amountPerShare);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("adjustmentTime:");
    sb.append(this.adjustmentTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shareQty:");
    sb.append(this.shareQty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("total:");
    if (this.total == null) {
      sb.append("null");
    } else {
      sb.append(this.total);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CashDividendPaymentStandardSchemeFactory implements SchemeFactory {
    public CashDividendPaymentStandardScheme getScheme() {
      return new CashDividendPaymentStandardScheme();
    }
  }

  private static class CashDividendPaymentStandardScheme extends StandardScheme<CashDividendPayment> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CashDividendPayment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SYMBOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.symbol = iprot.readString();
              struct.setSymbolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EX_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.exDate = iprot.readI64();
              struct.setExDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAYABLE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.payableDate = iprot.readI64();
              struct.setPayableDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AMOUNT_PER_SHARE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.amountPerShare = iprot.readString();
              struct.setAmountPerShareIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ADJUSTMENT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.adjustmentTime = iprot.readI64();
              struct.setAdjustmentTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SHARE_QTY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.shareQty = iprot.readI64();
              struct.setShareQtyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.total = iprot.readString();
              struct.setTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CashDividendPayment struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.symbol != null) {
        oprot.writeFieldBegin(SYMBOL_FIELD_DESC);
        oprot.writeString(struct.symbol);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EX_DATE_FIELD_DESC);
      oprot.writeI64(struct.exDate);
      oprot.writeFieldEnd();
      if (struct.isSetPayableDate()) {
        oprot.writeFieldBegin(PAYABLE_DATE_FIELD_DESC);
        oprot.writeI64(struct.payableDate);
        oprot.writeFieldEnd();
      }
      if (struct.amountPerShare != null) {
        oprot.writeFieldBegin(AMOUNT_PER_SHARE_FIELD_DESC);
        oprot.writeString(struct.amountPerShare);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ADJUSTMENT_TIME_FIELD_DESC);
      oprot.writeI64(struct.adjustmentTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHARE_QTY_FIELD_DESC);
      oprot.writeI64(struct.shareQty);
      oprot.writeFieldEnd();
      if (struct.total != null) {
        oprot.writeFieldBegin(TOTAL_FIELD_DESC);
        oprot.writeString(struct.total);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CashDividendPaymentTupleSchemeFactory implements SchemeFactory {
    public CashDividendPaymentTupleScheme getScheme() {
      return new CashDividendPaymentTupleScheme();
    }
  }

  private static class CashDividendPaymentTupleScheme extends TupleScheme<CashDividendPayment> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CashDividendPayment struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSymbol()) {
        optionals.set(0);
      }
      if (struct.isSetExDate()) {
        optionals.set(1);
      }
      if (struct.isSetPayableDate()) {
        optionals.set(2);
      }
      if (struct.isSetAmountPerShare()) {
        optionals.set(3);
      }
      if (struct.isSetAdjustmentTime()) {
        optionals.set(4);
      }
      if (struct.isSetShareQty()) {
        optionals.set(5);
      }
      if (struct.isSetTotal()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetSymbol()) {
        oprot.writeString(struct.symbol);
      }
      if (struct.isSetExDate()) {
        oprot.writeI64(struct.exDate);
      }
      if (struct.isSetPayableDate()) {
        oprot.writeI64(struct.payableDate);
      }
      if (struct.isSetAmountPerShare()) {
        oprot.writeString(struct.amountPerShare);
      }
      if (struct.isSetAdjustmentTime()) {
        oprot.writeI64(struct.adjustmentTime);
      }
      if (struct.isSetShareQty()) {
        oprot.writeI64(struct.shareQty);
      }
      if (struct.isSetTotal()) {
        oprot.writeString(struct.total);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CashDividendPayment struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.symbol = iprot.readString();
        struct.setSymbolIsSet(true);
      }
      if (incoming.get(1)) {
        struct.exDate = iprot.readI64();
        struct.setExDateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.payableDate = iprot.readI64();
        struct.setPayableDateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.amountPerShare = iprot.readString();
        struct.setAmountPerShareIsSet(true);
      }
      if (incoming.get(4)) {
        struct.adjustmentTime = iprot.readI64();
        struct.setAdjustmentTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.shareQty = iprot.readI64();
        struct.setShareQtyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.total = iprot.readString();
        struct.setTotalIsSet(true);
      }
    }
  }

}

