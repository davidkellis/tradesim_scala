/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package dke.tradesim.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Transaction implements org.apache.thrift.TBase<Transaction, Transaction._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Transaction");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MARKET_BUY_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("marketBuyOrder", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField MARKET_SELL_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("marketSellOrder", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField LIMIT_BUY_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("limitBuyOrder", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField LIMIT_SELL_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("limitSellOrder", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField SPLIT_ADJUSTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("splitAdjustment", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField CASH_DIVIDEND_PAYMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("cashDividendPayment", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TransactionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TransactionTupleSchemeFactory());
  }

  /**
   * 
   * @see TransactionType
   */
  public TransactionType type; // required
  public MarketBuyOrder marketBuyOrder; // optional
  public MarketSellOrder marketSellOrder; // optional
  public LimitBuyOrder limitBuyOrder; // optional
  public LimitSellOrder limitSellOrder; // optional
  public SplitAdjustment splitAdjustment; // optional
  public CashDividendPayment cashDividendPayment; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TransactionType
     */
    TYPE((short)1, "type"),
    MARKET_BUY_ORDER((short)2, "marketBuyOrder"),
    MARKET_SELL_ORDER((short)3, "marketSellOrder"),
    LIMIT_BUY_ORDER((short)4, "limitBuyOrder"),
    LIMIT_SELL_ORDER((short)5, "limitSellOrder"),
    SPLIT_ADJUSTMENT((short)6, "splitAdjustment"),
    CASH_DIVIDEND_PAYMENT((short)7, "cashDividendPayment");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // MARKET_BUY_ORDER
          return MARKET_BUY_ORDER;
        case 3: // MARKET_SELL_ORDER
          return MARKET_SELL_ORDER;
        case 4: // LIMIT_BUY_ORDER
          return LIMIT_BUY_ORDER;
        case 5: // LIMIT_SELL_ORDER
          return LIMIT_SELL_ORDER;
        case 6: // SPLIT_ADJUSTMENT
          return SPLIT_ADJUSTMENT;
        case 7: // CASH_DIVIDEND_PAYMENT
          return CASH_DIVIDEND_PAYMENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.MARKET_BUY_ORDER,_Fields.MARKET_SELL_ORDER,_Fields.LIMIT_BUY_ORDER,_Fields.LIMIT_SELL_ORDER,_Fields.SPLIT_ADJUSTMENT,_Fields.CASH_DIVIDEND_PAYMENT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TransactionType.class)));
    tmpMap.put(_Fields.MARKET_BUY_ORDER, new org.apache.thrift.meta_data.FieldMetaData("marketBuyOrder", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MarketBuyOrder.class)));
    tmpMap.put(_Fields.MARKET_SELL_ORDER, new org.apache.thrift.meta_data.FieldMetaData("marketSellOrder", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MarketSellOrder.class)));
    tmpMap.put(_Fields.LIMIT_BUY_ORDER, new org.apache.thrift.meta_data.FieldMetaData("limitBuyOrder", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LimitBuyOrder.class)));
    tmpMap.put(_Fields.LIMIT_SELL_ORDER, new org.apache.thrift.meta_data.FieldMetaData("limitSellOrder", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LimitSellOrder.class)));
    tmpMap.put(_Fields.SPLIT_ADJUSTMENT, new org.apache.thrift.meta_data.FieldMetaData("splitAdjustment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SplitAdjustment.class)));
    tmpMap.put(_Fields.CASH_DIVIDEND_PAYMENT, new org.apache.thrift.meta_data.FieldMetaData("cashDividendPayment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CashDividendPayment.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Transaction.class, metaDataMap);
  }

  public Transaction() {
  }

  public Transaction(
    TransactionType type)
  {
    this();
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Transaction(Transaction other) {
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetMarketBuyOrder()) {
      this.marketBuyOrder = new MarketBuyOrder(other.marketBuyOrder);
    }
    if (other.isSetMarketSellOrder()) {
      this.marketSellOrder = new MarketSellOrder(other.marketSellOrder);
    }
    if (other.isSetLimitBuyOrder()) {
      this.limitBuyOrder = new LimitBuyOrder(other.limitBuyOrder);
    }
    if (other.isSetLimitSellOrder()) {
      this.limitSellOrder = new LimitSellOrder(other.limitSellOrder);
    }
    if (other.isSetSplitAdjustment()) {
      this.splitAdjustment = new SplitAdjustment(other.splitAdjustment);
    }
    if (other.isSetCashDividendPayment()) {
      this.cashDividendPayment = new CashDividendPayment(other.cashDividendPayment);
    }
  }

  public Transaction deepCopy() {
    return new Transaction(this);
  }

  @Override
  public void clear() {
    this.type = null;
    this.marketBuyOrder = null;
    this.marketSellOrder = null;
    this.limitBuyOrder = null;
    this.limitSellOrder = null;
    this.splitAdjustment = null;
    this.cashDividendPayment = null;
  }

  /**
   * 
   * @see TransactionType
   */
  public TransactionType getType() {
    return this.type;
  }

  /**
   * 
   * @see TransactionType
   */
  public Transaction setType(TransactionType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public MarketBuyOrder getMarketBuyOrder() {
    return this.marketBuyOrder;
  }

  public Transaction setMarketBuyOrder(MarketBuyOrder marketBuyOrder) {
    this.marketBuyOrder = marketBuyOrder;
    return this;
  }

  public void unsetMarketBuyOrder() {
    this.marketBuyOrder = null;
  }

  /** Returns true if field marketBuyOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetMarketBuyOrder() {
    return this.marketBuyOrder != null;
  }

  public void setMarketBuyOrderIsSet(boolean value) {
    if (!value) {
      this.marketBuyOrder = null;
    }
  }

  public MarketSellOrder getMarketSellOrder() {
    return this.marketSellOrder;
  }

  public Transaction setMarketSellOrder(MarketSellOrder marketSellOrder) {
    this.marketSellOrder = marketSellOrder;
    return this;
  }

  public void unsetMarketSellOrder() {
    this.marketSellOrder = null;
  }

  /** Returns true if field marketSellOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetMarketSellOrder() {
    return this.marketSellOrder != null;
  }

  public void setMarketSellOrderIsSet(boolean value) {
    if (!value) {
      this.marketSellOrder = null;
    }
  }

  public LimitBuyOrder getLimitBuyOrder() {
    return this.limitBuyOrder;
  }

  public Transaction setLimitBuyOrder(LimitBuyOrder limitBuyOrder) {
    this.limitBuyOrder = limitBuyOrder;
    return this;
  }

  public void unsetLimitBuyOrder() {
    this.limitBuyOrder = null;
  }

  /** Returns true if field limitBuyOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitBuyOrder() {
    return this.limitBuyOrder != null;
  }

  public void setLimitBuyOrderIsSet(boolean value) {
    if (!value) {
      this.limitBuyOrder = null;
    }
  }

  public LimitSellOrder getLimitSellOrder() {
    return this.limitSellOrder;
  }

  public Transaction setLimitSellOrder(LimitSellOrder limitSellOrder) {
    this.limitSellOrder = limitSellOrder;
    return this;
  }

  public void unsetLimitSellOrder() {
    this.limitSellOrder = null;
  }

  /** Returns true if field limitSellOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitSellOrder() {
    return this.limitSellOrder != null;
  }

  public void setLimitSellOrderIsSet(boolean value) {
    if (!value) {
      this.limitSellOrder = null;
    }
  }

  public SplitAdjustment getSplitAdjustment() {
    return this.splitAdjustment;
  }

  public Transaction setSplitAdjustment(SplitAdjustment splitAdjustment) {
    this.splitAdjustment = splitAdjustment;
    return this;
  }

  public void unsetSplitAdjustment() {
    this.splitAdjustment = null;
  }

  /** Returns true if field splitAdjustment is set (has been assigned a value) and false otherwise */
  public boolean isSetSplitAdjustment() {
    return this.splitAdjustment != null;
  }

  public void setSplitAdjustmentIsSet(boolean value) {
    if (!value) {
      this.splitAdjustment = null;
    }
  }

  public CashDividendPayment getCashDividendPayment() {
    return this.cashDividendPayment;
  }

  public Transaction setCashDividendPayment(CashDividendPayment cashDividendPayment) {
    this.cashDividendPayment = cashDividendPayment;
    return this;
  }

  public void unsetCashDividendPayment() {
    this.cashDividendPayment = null;
  }

  /** Returns true if field cashDividendPayment is set (has been assigned a value) and false otherwise */
  public boolean isSetCashDividendPayment() {
    return this.cashDividendPayment != null;
  }

  public void setCashDividendPaymentIsSet(boolean value) {
    if (!value) {
      this.cashDividendPayment = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((TransactionType)value);
      }
      break;

    case MARKET_BUY_ORDER:
      if (value == null) {
        unsetMarketBuyOrder();
      } else {
        setMarketBuyOrder((MarketBuyOrder)value);
      }
      break;

    case MARKET_SELL_ORDER:
      if (value == null) {
        unsetMarketSellOrder();
      } else {
        setMarketSellOrder((MarketSellOrder)value);
      }
      break;

    case LIMIT_BUY_ORDER:
      if (value == null) {
        unsetLimitBuyOrder();
      } else {
        setLimitBuyOrder((LimitBuyOrder)value);
      }
      break;

    case LIMIT_SELL_ORDER:
      if (value == null) {
        unsetLimitSellOrder();
      } else {
        setLimitSellOrder((LimitSellOrder)value);
      }
      break;

    case SPLIT_ADJUSTMENT:
      if (value == null) {
        unsetSplitAdjustment();
      } else {
        setSplitAdjustment((SplitAdjustment)value);
      }
      break;

    case CASH_DIVIDEND_PAYMENT:
      if (value == null) {
        unsetCashDividendPayment();
      } else {
        setCashDividendPayment((CashDividendPayment)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case MARKET_BUY_ORDER:
      return getMarketBuyOrder();

    case MARKET_SELL_ORDER:
      return getMarketSellOrder();

    case LIMIT_BUY_ORDER:
      return getLimitBuyOrder();

    case LIMIT_SELL_ORDER:
      return getLimitSellOrder();

    case SPLIT_ADJUSTMENT:
      return getSplitAdjustment();

    case CASH_DIVIDEND_PAYMENT:
      return getCashDividendPayment();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case MARKET_BUY_ORDER:
      return isSetMarketBuyOrder();
    case MARKET_SELL_ORDER:
      return isSetMarketSellOrder();
    case LIMIT_BUY_ORDER:
      return isSetLimitBuyOrder();
    case LIMIT_SELL_ORDER:
      return isSetLimitSellOrder();
    case SPLIT_ADJUSTMENT:
      return isSetSplitAdjustment();
    case CASH_DIVIDEND_PAYMENT:
      return isSetCashDividendPayment();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Transaction)
      return this.equals((Transaction)that);
    return false;
  }

  public boolean equals(Transaction that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_marketBuyOrder = true && this.isSetMarketBuyOrder();
    boolean that_present_marketBuyOrder = true && that.isSetMarketBuyOrder();
    if (this_present_marketBuyOrder || that_present_marketBuyOrder) {
      if (!(this_present_marketBuyOrder && that_present_marketBuyOrder))
        return false;
      if (!this.marketBuyOrder.equals(that.marketBuyOrder))
        return false;
    }

    boolean this_present_marketSellOrder = true && this.isSetMarketSellOrder();
    boolean that_present_marketSellOrder = true && that.isSetMarketSellOrder();
    if (this_present_marketSellOrder || that_present_marketSellOrder) {
      if (!(this_present_marketSellOrder && that_present_marketSellOrder))
        return false;
      if (!this.marketSellOrder.equals(that.marketSellOrder))
        return false;
    }

    boolean this_present_limitBuyOrder = true && this.isSetLimitBuyOrder();
    boolean that_present_limitBuyOrder = true && that.isSetLimitBuyOrder();
    if (this_present_limitBuyOrder || that_present_limitBuyOrder) {
      if (!(this_present_limitBuyOrder && that_present_limitBuyOrder))
        return false;
      if (!this.limitBuyOrder.equals(that.limitBuyOrder))
        return false;
    }

    boolean this_present_limitSellOrder = true && this.isSetLimitSellOrder();
    boolean that_present_limitSellOrder = true && that.isSetLimitSellOrder();
    if (this_present_limitSellOrder || that_present_limitSellOrder) {
      if (!(this_present_limitSellOrder && that_present_limitSellOrder))
        return false;
      if (!this.limitSellOrder.equals(that.limitSellOrder))
        return false;
    }

    boolean this_present_splitAdjustment = true && this.isSetSplitAdjustment();
    boolean that_present_splitAdjustment = true && that.isSetSplitAdjustment();
    if (this_present_splitAdjustment || that_present_splitAdjustment) {
      if (!(this_present_splitAdjustment && that_present_splitAdjustment))
        return false;
      if (!this.splitAdjustment.equals(that.splitAdjustment))
        return false;
    }

    boolean this_present_cashDividendPayment = true && this.isSetCashDividendPayment();
    boolean that_present_cashDividendPayment = true && that.isSetCashDividendPayment();
    if (this_present_cashDividendPayment || that_present_cashDividendPayment) {
      if (!(this_present_cashDividendPayment && that_present_cashDividendPayment))
        return false;
      if (!this.cashDividendPayment.equals(that.cashDividendPayment))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Transaction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Transaction typedOther = (Transaction)other;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarketBuyOrder()).compareTo(typedOther.isSetMarketBuyOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarketBuyOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marketBuyOrder, typedOther.marketBuyOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarketSellOrder()).compareTo(typedOther.isSetMarketSellOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarketSellOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marketSellOrder, typedOther.marketSellOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitBuyOrder()).compareTo(typedOther.isSetLimitBuyOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitBuyOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitBuyOrder, typedOther.limitBuyOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitSellOrder()).compareTo(typedOther.isSetLimitSellOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitSellOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitSellOrder, typedOther.limitSellOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSplitAdjustment()).compareTo(typedOther.isSetSplitAdjustment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSplitAdjustment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.splitAdjustment, typedOther.splitAdjustment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashDividendPayment()).compareTo(typedOther.isSetCashDividendPayment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashDividendPayment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashDividendPayment, typedOther.cashDividendPayment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Transaction(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetMarketBuyOrder()) {
      if (!first) sb.append(", ");
      sb.append("marketBuyOrder:");
      if (this.marketBuyOrder == null) {
        sb.append("null");
      } else {
        sb.append(this.marketBuyOrder);
      }
      first = false;
    }
    if (isSetMarketSellOrder()) {
      if (!first) sb.append(", ");
      sb.append("marketSellOrder:");
      if (this.marketSellOrder == null) {
        sb.append("null");
      } else {
        sb.append(this.marketSellOrder);
      }
      first = false;
    }
    if (isSetLimitBuyOrder()) {
      if (!first) sb.append(", ");
      sb.append("limitBuyOrder:");
      if (this.limitBuyOrder == null) {
        sb.append("null");
      } else {
        sb.append(this.limitBuyOrder);
      }
      first = false;
    }
    if (isSetLimitSellOrder()) {
      if (!first) sb.append(", ");
      sb.append("limitSellOrder:");
      if (this.limitSellOrder == null) {
        sb.append("null");
      } else {
        sb.append(this.limitSellOrder);
      }
      first = false;
    }
    if (isSetSplitAdjustment()) {
      if (!first) sb.append(", ");
      sb.append("splitAdjustment:");
      if (this.splitAdjustment == null) {
        sb.append("null");
      } else {
        sb.append(this.splitAdjustment);
      }
      first = false;
    }
    if (isSetCashDividendPayment()) {
      if (!first) sb.append(", ");
      sb.append("cashDividendPayment:");
      if (this.cashDividendPayment == null) {
        sb.append("null");
      } else {
        sb.append(this.cashDividendPayment);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (marketBuyOrder != null) {
      marketBuyOrder.validate();
    }
    if (marketSellOrder != null) {
      marketSellOrder.validate();
    }
    if (limitBuyOrder != null) {
      limitBuyOrder.validate();
    }
    if (limitSellOrder != null) {
      limitSellOrder.validate();
    }
    if (splitAdjustment != null) {
      splitAdjustment.validate();
    }
    if (cashDividendPayment != null) {
      cashDividendPayment.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TransactionStandardSchemeFactory implements SchemeFactory {
    public TransactionStandardScheme getScheme() {
      return new TransactionStandardScheme();
    }
  }

  private static class TransactionStandardScheme extends StandardScheme<Transaction> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Transaction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = TransactionType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MARKET_BUY_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.marketBuyOrder = new MarketBuyOrder();
              struct.marketBuyOrder.read(iprot);
              struct.setMarketBuyOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MARKET_SELL_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.marketSellOrder = new MarketSellOrder();
              struct.marketSellOrder.read(iprot);
              struct.setMarketSellOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LIMIT_BUY_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.limitBuyOrder = new LimitBuyOrder();
              struct.limitBuyOrder.read(iprot);
              struct.setLimitBuyOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LIMIT_SELL_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.limitSellOrder = new LimitSellOrder();
              struct.limitSellOrder.read(iprot);
              struct.setLimitSellOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SPLIT_ADJUSTMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.splitAdjustment = new SplitAdjustment();
              struct.splitAdjustment.read(iprot);
              struct.setSplitAdjustmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CASH_DIVIDEND_PAYMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cashDividendPayment = new CashDividendPayment();
              struct.cashDividendPayment.read(iprot);
              struct.setCashDividendPaymentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Transaction struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.marketBuyOrder != null) {
        if (struct.isSetMarketBuyOrder()) {
          oprot.writeFieldBegin(MARKET_BUY_ORDER_FIELD_DESC);
          struct.marketBuyOrder.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.marketSellOrder != null) {
        if (struct.isSetMarketSellOrder()) {
          oprot.writeFieldBegin(MARKET_SELL_ORDER_FIELD_DESC);
          struct.marketSellOrder.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.limitBuyOrder != null) {
        if (struct.isSetLimitBuyOrder()) {
          oprot.writeFieldBegin(LIMIT_BUY_ORDER_FIELD_DESC);
          struct.limitBuyOrder.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.limitSellOrder != null) {
        if (struct.isSetLimitSellOrder()) {
          oprot.writeFieldBegin(LIMIT_SELL_ORDER_FIELD_DESC);
          struct.limitSellOrder.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.splitAdjustment != null) {
        if (struct.isSetSplitAdjustment()) {
          oprot.writeFieldBegin(SPLIT_ADJUSTMENT_FIELD_DESC);
          struct.splitAdjustment.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cashDividendPayment != null) {
        if (struct.isSetCashDividendPayment()) {
          oprot.writeFieldBegin(CASH_DIVIDEND_PAYMENT_FIELD_DESC);
          struct.cashDividendPayment.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TransactionTupleSchemeFactory implements SchemeFactory {
    public TransactionTupleScheme getScheme() {
      return new TransactionTupleScheme();
    }
  }

  private static class TransactionTupleScheme extends TupleScheme<Transaction> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Transaction struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetMarketBuyOrder()) {
        optionals.set(1);
      }
      if (struct.isSetMarketSellOrder()) {
        optionals.set(2);
      }
      if (struct.isSetLimitBuyOrder()) {
        optionals.set(3);
      }
      if (struct.isSetLimitSellOrder()) {
        optionals.set(4);
      }
      if (struct.isSetSplitAdjustment()) {
        optionals.set(5);
      }
      if (struct.isSetCashDividendPayment()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetMarketBuyOrder()) {
        struct.marketBuyOrder.write(oprot);
      }
      if (struct.isSetMarketSellOrder()) {
        struct.marketSellOrder.write(oprot);
      }
      if (struct.isSetLimitBuyOrder()) {
        struct.limitBuyOrder.write(oprot);
      }
      if (struct.isSetLimitSellOrder()) {
        struct.limitSellOrder.write(oprot);
      }
      if (struct.isSetSplitAdjustment()) {
        struct.splitAdjustment.write(oprot);
      }
      if (struct.isSetCashDividendPayment()) {
        struct.cashDividendPayment.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Transaction struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.type = TransactionType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.marketBuyOrder = new MarketBuyOrder();
        struct.marketBuyOrder.read(iprot);
        struct.setMarketBuyOrderIsSet(true);
      }
      if (incoming.get(2)) {
        struct.marketSellOrder = new MarketSellOrder();
        struct.marketSellOrder.read(iprot);
        struct.setMarketSellOrderIsSet(true);
      }
      if (incoming.get(3)) {
        struct.limitBuyOrder = new LimitBuyOrder();
        struct.limitBuyOrder.read(iprot);
        struct.setLimitBuyOrderIsSet(true);
      }
      if (incoming.get(4)) {
        struct.limitSellOrder = new LimitSellOrder();
        struct.limitSellOrder.read(iprot);
        struct.setLimitSellOrderIsSet(true);
      }
      if (incoming.get(5)) {
        struct.splitAdjustment = new SplitAdjustment();
        struct.splitAdjustment.read(iprot);
        struct.setSplitAdjustmentIsSet(true);
      }
      if (incoming.get(6)) {
        struct.cashDividendPayment = new CashDividendPayment();
        struct.cashDividendPayment.read(iprot);
        struct.setCashDividendPaymentIsSet(true);
      }
    }
  }

}

