/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package dke.tradesim.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LimitBuyOrder implements org.apache.thrift.TBase<LimitBuyOrder, LimitBuyOrder._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LimitBuyOrder");

  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SYMBOL_FIELD_DESC = new org.apache.thrift.protocol.TField("symbol", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField QTY_FIELD_DESC = new org.apache.thrift.protocol.TField("qty", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField LIMIT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("limitPrice", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FILL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("fillPrice", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LimitBuyOrderStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LimitBuyOrderTupleSchemeFactory());
  }

  public long time; // required
  public String symbol; // required
  public long qty; // required
  public String limitPrice; // required
  public String fillPrice; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIME((short)1, "time"),
    SYMBOL((short)2, "symbol"),
    QTY((short)3, "qty"),
    LIMIT_PRICE((short)4, "limitPrice"),
    FILL_PRICE((short)5, "fillPrice");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIME
          return TIME;
        case 2: // SYMBOL
          return SYMBOL;
        case 3: // QTY
          return QTY;
        case 4: // LIMIT_PRICE
          return LIMIT_PRICE;
        case 5: // FILL_PRICE
          return FILL_PRICE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIME_ISSET_ID = 0;
  private static final int __QTY_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.FILL_PRICE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SYMBOL, new org.apache.thrift.meta_data.FieldMetaData("symbol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QTY, new org.apache.thrift.meta_data.FieldMetaData("qty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LIMIT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("limitPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("fillPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LimitBuyOrder.class, metaDataMap);
  }

  public LimitBuyOrder() {
  }

  public LimitBuyOrder(
    long time,
    String symbol,
    long qty,
    String limitPrice)
  {
    this();
    this.time = time;
    setTimeIsSet(true);
    this.symbol = symbol;
    this.qty = qty;
    setQtyIsSet(true);
    this.limitPrice = limitPrice;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LimitBuyOrder(LimitBuyOrder other) {
    __isset_bitfield = other.__isset_bitfield;
    this.time = other.time;
    if (other.isSetSymbol()) {
      this.symbol = other.symbol;
    }
    this.qty = other.qty;
    if (other.isSetLimitPrice()) {
      this.limitPrice = other.limitPrice;
    }
    if (other.isSetFillPrice()) {
      this.fillPrice = other.fillPrice;
    }
  }

  public LimitBuyOrder deepCopy() {
    return new LimitBuyOrder(this);
  }

  @Override
  public void clear() {
    setTimeIsSet(false);
    this.time = 0;
    this.symbol = null;
    setQtyIsSet(false);
    this.qty = 0;
    this.limitPrice = null;
    this.fillPrice = null;
  }

  public long getTime() {
    return this.time;
  }

  public LimitBuyOrder setTime(long time) {
    this.time = time;
    setTimeIsSet(true);
    return this;
  }

  public void unsetTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  public void setTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
  }

  public String getSymbol() {
    return this.symbol;
  }

  public LimitBuyOrder setSymbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

  public void unsetSymbol() {
    this.symbol = null;
  }

  /** Returns true if field symbol is set (has been assigned a value) and false otherwise */
  public boolean isSetSymbol() {
    return this.symbol != null;
  }

  public void setSymbolIsSet(boolean value) {
    if (!value) {
      this.symbol = null;
    }
  }

  public long getQty() {
    return this.qty;
  }

  public LimitBuyOrder setQty(long qty) {
    this.qty = qty;
    setQtyIsSet(true);
    return this;
  }

  public void unsetQty() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QTY_ISSET_ID);
  }

  /** Returns true if field qty is set (has been assigned a value) and false otherwise */
  public boolean isSetQty() {
    return EncodingUtils.testBit(__isset_bitfield, __QTY_ISSET_ID);
  }

  public void setQtyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QTY_ISSET_ID, value);
  }

  public String getLimitPrice() {
    return this.limitPrice;
  }

  public LimitBuyOrder setLimitPrice(String limitPrice) {
    this.limitPrice = limitPrice;
    return this;
  }

  public void unsetLimitPrice() {
    this.limitPrice = null;
  }

  /** Returns true if field limitPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitPrice() {
    return this.limitPrice != null;
  }

  public void setLimitPriceIsSet(boolean value) {
    if (!value) {
      this.limitPrice = null;
    }
  }

  public String getFillPrice() {
    return this.fillPrice;
  }

  public LimitBuyOrder setFillPrice(String fillPrice) {
    this.fillPrice = fillPrice;
    return this;
  }

  public void unsetFillPrice() {
    this.fillPrice = null;
  }

  /** Returns true if field fillPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetFillPrice() {
    return this.fillPrice != null;
  }

  public void setFillPriceIsSet(boolean value) {
    if (!value) {
      this.fillPrice = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((Long)value);
      }
      break;

    case SYMBOL:
      if (value == null) {
        unsetSymbol();
      } else {
        setSymbol((String)value);
      }
      break;

    case QTY:
      if (value == null) {
        unsetQty();
      } else {
        setQty((Long)value);
      }
      break;

    case LIMIT_PRICE:
      if (value == null) {
        unsetLimitPrice();
      } else {
        setLimitPrice((String)value);
      }
      break;

    case FILL_PRICE:
      if (value == null) {
        unsetFillPrice();
      } else {
        setFillPrice((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIME:
      return Long.valueOf(getTime());

    case SYMBOL:
      return getSymbol();

    case QTY:
      return Long.valueOf(getQty());

    case LIMIT_PRICE:
      return getLimitPrice();

    case FILL_PRICE:
      return getFillPrice();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIME:
      return isSetTime();
    case SYMBOL:
      return isSetSymbol();
    case QTY:
      return isSetQty();
    case LIMIT_PRICE:
      return isSetLimitPrice();
    case FILL_PRICE:
      return isSetFillPrice();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LimitBuyOrder)
      return this.equals((LimitBuyOrder)that);
    return false;
  }

  public boolean equals(LimitBuyOrder that) {
    if (that == null)
      return false;

    boolean this_present_time = true;
    boolean that_present_time = true;
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (this.time != that.time)
        return false;
    }

    boolean this_present_symbol = true && this.isSetSymbol();
    boolean that_present_symbol = true && that.isSetSymbol();
    if (this_present_symbol || that_present_symbol) {
      if (!(this_present_symbol && that_present_symbol))
        return false;
      if (!this.symbol.equals(that.symbol))
        return false;
    }

    boolean this_present_qty = true;
    boolean that_present_qty = true;
    if (this_present_qty || that_present_qty) {
      if (!(this_present_qty && that_present_qty))
        return false;
      if (this.qty != that.qty)
        return false;
    }

    boolean this_present_limitPrice = true && this.isSetLimitPrice();
    boolean that_present_limitPrice = true && that.isSetLimitPrice();
    if (this_present_limitPrice || that_present_limitPrice) {
      if (!(this_present_limitPrice && that_present_limitPrice))
        return false;
      if (!this.limitPrice.equals(that.limitPrice))
        return false;
    }

    boolean this_present_fillPrice = true && this.isSetFillPrice();
    boolean that_present_fillPrice = true && that.isSetFillPrice();
    if (this_present_fillPrice || that_present_fillPrice) {
      if (!(this_present_fillPrice && that_present_fillPrice))
        return false;
      if (!this.fillPrice.equals(that.fillPrice))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(LimitBuyOrder other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    LimitBuyOrder typedOther = (LimitBuyOrder)other;

    lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSymbol()).compareTo(typedOther.isSetSymbol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSymbol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.symbol, typedOther.symbol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQty()).compareTo(typedOther.isSetQty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qty, typedOther.qty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitPrice()).compareTo(typedOther.isSetLimitPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitPrice, typedOther.limitPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFillPrice()).compareTo(typedOther.isSetFillPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFillPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fillPrice, typedOther.fillPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LimitBuyOrder(");
    boolean first = true;

    sb.append("time:");
    sb.append(this.time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("symbol:");
    if (this.symbol == null) {
      sb.append("null");
    } else {
      sb.append(this.symbol);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("qty:");
    sb.append(this.qty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("limitPrice:");
    if (this.limitPrice == null) {
      sb.append("null");
    } else {
      sb.append(this.limitPrice);
    }
    first = false;
    if (isSetFillPrice()) {
      if (!first) sb.append(", ");
      sb.append("fillPrice:");
      if (this.fillPrice == null) {
        sb.append("null");
      } else {
        sb.append(this.fillPrice);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LimitBuyOrderStandardSchemeFactory implements SchemeFactory {
    public LimitBuyOrderStandardScheme getScheme() {
      return new LimitBuyOrderStandardScheme();
    }
  }

  private static class LimitBuyOrderStandardScheme extends StandardScheme<LimitBuyOrder> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LimitBuyOrder struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.time = iprot.readI64();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SYMBOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.symbol = iprot.readString();
              struct.setSymbolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QTY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.qty = iprot.readI64();
              struct.setQtyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LIMIT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.limitPrice = iprot.readString();
              struct.setLimitPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FILL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fillPrice = iprot.readString();
              struct.setFillPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LimitBuyOrder struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TIME_FIELD_DESC);
      oprot.writeI64(struct.time);
      oprot.writeFieldEnd();
      if (struct.symbol != null) {
        oprot.writeFieldBegin(SYMBOL_FIELD_DESC);
        oprot.writeString(struct.symbol);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QTY_FIELD_DESC);
      oprot.writeI64(struct.qty);
      oprot.writeFieldEnd();
      if (struct.limitPrice != null) {
        oprot.writeFieldBegin(LIMIT_PRICE_FIELD_DESC);
        oprot.writeString(struct.limitPrice);
        oprot.writeFieldEnd();
      }
      if (struct.fillPrice != null) {
        if (struct.isSetFillPrice()) {
          oprot.writeFieldBegin(FILL_PRICE_FIELD_DESC);
          oprot.writeString(struct.fillPrice);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LimitBuyOrderTupleSchemeFactory implements SchemeFactory {
    public LimitBuyOrderTupleScheme getScheme() {
      return new LimitBuyOrderTupleScheme();
    }
  }

  private static class LimitBuyOrderTupleScheme extends TupleScheme<LimitBuyOrder> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LimitBuyOrder struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTime()) {
        optionals.set(0);
      }
      if (struct.isSetSymbol()) {
        optionals.set(1);
      }
      if (struct.isSetQty()) {
        optionals.set(2);
      }
      if (struct.isSetLimitPrice()) {
        optionals.set(3);
      }
      if (struct.isSetFillPrice()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetTime()) {
        oprot.writeI64(struct.time);
      }
      if (struct.isSetSymbol()) {
        oprot.writeString(struct.symbol);
      }
      if (struct.isSetQty()) {
        oprot.writeI64(struct.qty);
      }
      if (struct.isSetLimitPrice()) {
        oprot.writeString(struct.limitPrice);
      }
      if (struct.isSetFillPrice()) {
        oprot.writeString(struct.fillPrice);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LimitBuyOrder struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.time = iprot.readI64();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.symbol = iprot.readString();
        struct.setSymbolIsSet(true);
      }
      if (incoming.get(2)) {
        struct.qty = iprot.readI64();
        struct.setQtyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.limitPrice = iprot.readString();
        struct.setLimitPriceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fillPrice = iprot.readString();
        struct.setFillPriceIsSet(true);
      }
    }
  }

}

