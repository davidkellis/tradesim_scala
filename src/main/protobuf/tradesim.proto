// generate ruby with: protoc --beefcake_out protobuf/ -I protobuf/ protobuf/tradesim.proto
// generate scala with:
//   cd ScalaBuff
//   sbt package
//   scala scalabuff-compiler/target/scala-2.10/scalabuff-compiler_2.10-1.3.7-SNAPSHOT.jar --proto_path=../tradesim_scala/src/main/protobuf/ --scala_out=../tradesim_scala/src/main/scala/

package dke.tradesim.protobuf;


message TransactionLog {
  repeated Transaction transactions = 1;
}

message Transaction {
  enum Type {
    Order = 0;
    SplitAdjustment = 1;
    CashDividendPayment = 2;
  }
  required Type type = 1;
  optional Order order = 2;
  optional SplitAdjustment splitAdjustment = 3;
  optional CashDividendPayment cashDividendPayment = 4;
}

/*
Scala type:
  sealed trait Order extends Transaction {
    val time: DateTime
    val securityId: SecurityId
    val qty: Long
    val fillPrice: Option[BigDecimal]
    def changeQty(newQty: Long): Order
    def changeFillPrice(newFillPrice: BigDecimal): Order
  }

  case class LimitBuy(time: DateTime, securityId: SecurityId, qty: Long, limitPrice: BigDecimal, fillPrice: Option[BigDecimal] = None) extends LimitOrder with BuyOrder {
    def changeQty(newQty: Long): LimitBuy = this.copy(qty = newQty)
    def changeLimitPrice(newLimitPrice: BigDecimal): LimitBuy = this.copy(limitPrice = newLimitPrice)
    def changeFillPrice(newFillPrice: BigDecimal): LimitBuy = this.copy(fillPrice = Option(newFillPrice))
  }

  etc.
*/
message Order {
  enum Type {
    MarketBuy = 0;
    MarketSell = 1;
    LimitBuy = 2;
    LimitSell = 3;
  }
  required Type type = 1;
  required int64 time = 2;
  required int64 securityId = 3;
  required int64 qty = 4;
  optional string fillPrice = 5;
  optional string limitPrice = 6;
}

/*
Scala type:
  case class SplitAdjustment(securityId: SecurityId,
                             exDate: DateTime,
                             ratio: BigDecimal,
                             adjustmentTime: DateTime,
                             shareQtyDelta: Long,
                             cashPayout: BigDecimal) extends Transaction
*/
message SplitAdjustment {
  required int64 securityId = 1;
  required int32 exDate = 2;
  required string ratio = 3;
  required int64 adjustmentTime = 4;
  required int64 shareQtyDelta = 5;
  required string cashPayout = 6;
}

/*
Scala type:
  case class CashDividendPayment(securityId: SecurityId,
                                 exDate: DateTime,                     // on or after this date, the security trades without the dividend
                                 payableDate: Option[DateTime],        // date at which company issues payment of dividend
                                 amountPerShare: BigDecimal,           // amount of the dividend, per share
                                 adjustmentTime: DateTime,             // time at which the adjustment took place
                                 shareQty: Long,                       // number of shares on hand of <securityId>
                                 total: BigDecimal) extends Transaction
*/
message CashDividendPayment {
  required int64 securityId = 1;
  required int64 exDate = 2;            // on or after this date, the security trades without the dividend
  optional int64 payableDate = 3;       // date at which company issues payment of dividend
  required string amountPerShare = 4;   // amount of the dividend, per share
  required int64 adjustmentTime = 5;    // time at which the adjustment took place
  required int64 shareQty = 6;          // number of shares on hand of <securityId>
  required string total = 7;
}



message PortfolioValueLog {
  repeated PortfolioValue portfolioValues = 1;
}

message PortfolioValue {
  required int64 time = 1;
  required string value = 2;
}



message FinancialStatement {
  repeated StatementLineItem lineItems = 1;
}

message StatementLineItem {
  enum Type {
    String = 0;
    Decimal = 1;
  }
  required Type type = 1;
  required string attribute = 2;
  optional string value = 3;
}