package dke.tradesim

//import org.junit.runner.RunWith
//import org.scalatest.junit.JUnitRunner
import org.scalatest.FunSpec
import intList._
import bitManipulation._
import java.io.{IOException, ByteArrayInputStream}

//@RunWith(classOf[JUnitRunner])
class intListSpec extends FunSpec {
  describe("bit writing and reading") {
    it("writes and reads bits") {
      val bw = new BitWriter
      bw.write(BigInt(6), 3)
      bw.write(BigInt(3), 2)
      bw.write(BigInt(1), 3)
      bw.write(BigInt(481), 9)
      bw.write(BigInt(67), 7)
      bw.close

      val br = new BitReader(new ByteArrayInputStream(bw.toByteArray))

      assert(br.read(1) === 1)
      assert(br.read(3) === 5)
      assert(br.read(4) === 9)
      assert(br.read(4) === 15)
      assert(br.read(8) === 12)
      assert(br.read(4) === 3)
      intercept[IOException] {
        br.read(4)
      }
    }
  }

  describe("BinaryPackingIntListEncoder") {
    it("encodes a list of integers") {
      val e = new BinaryPackingIntListEncoder(128)
      val ints = List(1, 2, 50).map(BigInt(_))

      val encodedInts = e.encode(ints)
      val decodedInts = e.decode(new ByteArrayInputStream(encodedInts.toByteArray))

      assert(ints.sorted === decodedInts.sorted)
    }

    it("encodes and decodes a known good encoding (with block size 128)") {
      val ints = List(7592454,8057713,5924959,9399853,6241879,4070139,7688230,3757258,7486242,8244638,6228178,161482,2470485,5962515,2624689,3799359,1546877,306202,6982131,4362269,8633545,753493,4095079,2796309,718196,6832753,7525345,4572470,1927389,8293458,7972469,4866196,5653824,8902475,2430364,9707710,5850061,8157747,3826904,4570551,6440485,6474097,8762983,1767138,239826,3610477,6571099,2836233,7386223,8991668,1094928,6688505,5249692,5584805,8725190,956508,317427,1255344,5817066,5345820,4342083,4435383,8520356,4201322,3571473,1426114,2369922,6687424,4444271,6570242,2507177,6734635,2335247,3385252,6323054,1373141,9786167,5774652,9930890,4509931,7566817,2769885,5360844,7423987,6387832,5971114,4469765,8139452,9711273,3440395,5427475,9633641,510364,7804969,4061926,2242454,8684594,782023,4091359,5108495,2217767,3381546,902742,8674758,3402657,8557477,3957893,1909256,5488320,3155570,8938676,865499,4403375,8102827,7002791,8568699,5573582,5506297,8387228,6056975,53604,8333271,3663781,2977303,1722624,2897331,3373614,3700620,5813476,7948432,8723936,5677870,579721,4644291,580807,6119296,4503353,5206245,8360023,1260526,3307395,6740003,2781798,517635,4125092,9213145,6224730,1887491,8353133,8518895,5702411,894704,7468554,6408570,4580210,5260254,4999899,729700,275878,9009094,8487343,9741509,3452020,3890865,8274281,703884,418727,7338714,5152918,5377466,9733574,7536829,9397866,1674076,8816610,987821,3952043,5911678,967561,353827,8521785,4694183,198464,2891472,4061964,7133375,966826,8340598,8429118,8356535,9884830,6137864,5487561,8292301,6990981,1423196,7527965,2352525,3326121,5979849,7894549,4089493,6425025,8197381,14342,9589717,1344892,7667787,1889487,4078816,1023255,6428598,9965509,5459705,8717269,3187470,9667184,8777424,6085042,9038461,701033,8537662,2159149,9741919,9879560,7896513,2906817,12698,5381462,8146289,7894784,5131904,2548131,399641,1997611,4773996,6005717,8626499,271473,2475238,3100563,9732257,1173181,1908272,2225759,4774228,9352628,5342404,9376533,3356535,7683904,4244802,2171267,8829091,3125337,7268802,8927467,6751242,1453362,2873965,8593623,2263438,128765,3553057,8182192,9952807,7882816,215332,186309,8734966,1281951,6322488,378605,5306119,6885271,5564419,3281521,9874101,9060315,9144157,2281079,921222,513726,4531130,8617102,8622072,6417299,6937340,6541570,4523119,8147152,2019678,5105743,3581564,4544267,7047028,9211226,7514348,1604334,4479224,5280344,2487996,8056038,8564727,5545501,1077890,9449962,1251986,605243,7846533,6290466,3371158,4134876,9512375,5511008,2205675,579762,6974262,2405032,9093048,7347768,5037241,501795,6087048,4280242,1381831,4957577,6454370,9676642,3116238,7679446,7905845,9488337,5155830,7159129,2390048,4872727,7966832,5460871,7461755,5687494,9932886,7977082,5404002,8907924,9902373,6391288,4491828,9563974,5429598,5171640,3420771,3928464,4688137,1650105,3176414,4757740,4276374,7822885,6879999,5794074,47922,8419415,3312051,8686224,4791652,1220620,3389424,6618772,9260424,9094459,5527243,7753304,1855287,4533530,2228776,6939244,1618087,3801868,9362572,9321385,5770179,6360243,9307114,980004,3642071,3046759,7269749,2492956,2067750,7192210,6523634,9386694,2499454,215785,7096736,2072859,1630782,5161546,6867800,4140529,2316859,8052644,5178580,6059138,9238551,5637686,9089493,720832,2427984,3614607,4960852,2891918,1379055,1689620,3097102,2043373,6590482,1148457,7948043,79371,2577065,8012590,2542187,3762732,1412310,6877319,9728875,2322636,5971830,625575,855921,2369666,1155223,7612996,9583557,3204403,6110405,8404240,2688581,5687952,8001673,4975782,9413238,9837566,2469146,227282,7994920,4069401,9853368,3141417,897781,7613323,9183450,9473223,6204223,1488104,8680573,1104634,3456671,1167274,8995740,314696,7890485,2306076,5638973,3864184,7286743,1713495,4658584,174573,1123501,2831327,8929129,4599355,8890453,3402788,323613,5503826,8252150,3251396,7150846,7498670,3932242,8959403,4194538,6922191,1331208,2385808,9195184,2636624,6661598,6541727,5506645,2726430,7483735,3852720,7361156,9617707,220671,6385549,4900425,3370500,5325982,6763793,6558658,9162511,7551468,9890394,8643262,9209388,1096721,1636128,1885043,6991958,498206,307711,1846078,2082486,1115444,3035756,1183017,860981,8269120,961426,8936365,5526211,4297485,7112669,4227600,3311053,6733034,1475743,772830,7548586,2131350,7489827,4210781,7758238,4392951,602785,3752329,4825515,6058938,6093932,8446428,8765037,8886468,3430612,6494778,5340198,6031121,7857224,3905491,2160588,5703888,6781512,2360525,8544929,5891339,8286639,1662678,2080842,9609765,6184432,9955180,2976384,6602179,4538634,2234772,5748880,9742735,8148032,2720917,1277361,4700533,1772862,4399662,2934532,818840,4134729,6200651,179526,8077281,4890252,6477067,6101810,8415757,3982268,5567525,3292012,9973912,5024870,9396574,1940545,5205508,8564956,4835709,9486292,5527096,7419262,584128,5378471,7919913,5310228,3450790,2654857,714714,8771183,1871471,2831065,9382186,2597295,5131153,6364658,1474821,8440864,9774369,4164211,7109407,8294439,3964773,5386192,4318026,8421944,7502749,7269000,7456862,1377785,1144074,9574640,2600874,1839926,8219822,6461740,5354931,7397529,3589294,2892988,8060062,8118640,4490535,8606753,5790624,2933885,3224316,7702111,4764475,1961530,3519771,2304407,3862594,2245574,3038987,5133122,5869380,515854,9039030,3025976,2306495,698440,3657679,6226970,2975440,1940347,2772092,9414982,782511,3721962,2642685,896260,1486081,2816325,5811294,240168,2344319,9123789,6535035,3747184,6313055,1621036,7493984,7383537,9062311,2531772,3038023,325715,3654843,5963346,7523875,9779132,9335386,3563454,4152,7620889,1826333,4416289,6850890,2916185,7388214,760303,6925142,3706945,3354191,7741259,6992599,2277230,3357264,9453530,3717478,7913434,4426377,50077,181390,9636268,8425915,6096704,9571443,2588481,8066343,3719949,9563242,3821275,4589969,9958753,164440,533232,3531914,212272,1843221,9516869,1090413,2119608,683115,7824944,3191863,820756,8322887,3711897,2378170,261163,2272910,780378,3635124,3679283,4913520,6881587,4393643,964673,5649698,4799108,8533625,373006,3398948,4567155,9169983,3767937,8334590,4517743,5263084,7976611,6966081,5504281,70427,1365753,7632834,3950066,2724637,825750,2890904,5368314,9747363,2386900,512647,2217374,3637240,9633843,3109061,9962848,6054912,6258018,4905840,6450575,8332447,8223616,872499,2873497,3256216,8602229,5791571,3352506,4811507,3606152,2610617,9223370,8441114,2088572,4415167,1547596,6392806,537735,692672,4875461,3319085,751398,2385215,9805361,1289240,9111681,8449278,3798079,4434527,4307734,3617515,2302781,3763512,7975793,6047910,7219557,5676871,185498,9238405,5897215,2638929,1987561,6562478,4515401,9780227,9366415,8261068,424669,3893892,3730823,4986989,1183835,4077678,2670282,9841440,7174521,166230,8640457,1587930,2272315,2590594,1751470,8009272,6795301,1605212,4689699,7786682,7753854,7705228,3591692,2190496,7329496,8891846,6449256,9951573,8519359,6068619,8287572,7080684,9132735,3121817,6289853,2721681,1755277,4617095,1492442,9762325,9093817,990147,9688837,4982775,7735520,9379943,7949313,9301585,4880270,7708591,711467,8724262,5657682,8093130,4729021,6896621,9723177,4460957,6531283,3600113,1026649,2763646,7166844,2517985,9260701,7679839,6444755,4284505,2998373,3140342,6467261,3887164,1292741,187360,4462672,8257868,2835872,9477973,7246679,2756365,4470533,1349735,3789978,7341861,1939862,1086293,3006708,7634271,2243412,3852566,8253924,9439832,6676430,2825751,7790749,4863111,2895707,1334781,2325432,4450621,1191941,4613182,1232861,8790244,580530,4764535,6536971,8216458,1528391,320978,239127,426187,7549204,8867356,8672097,1250208,4133301,1104019,6343980,2015913,6903593,8745065,970564,4397096,6036061,3638262,8889210,1371219,3378510,2857279,5096990,5994801,3998220,4081450,5530728,3440641,235629,7666507,9553878,1266348,6532208,3355162,4831748,1406922,5790344,4393645,2331622,3504298,581854,702039,2999459,1410261,9368031,266647,8703072,1505070,4928763,7067911,447296,2659207,7812446,8905758,2600626,4777574,7586127,3201512,3251980,9179223,7793467,4027264).map(BigInt(_))
      val expectedEncodedIntsBytes: Array[Byte] = Array(160,56,8,41,129,0,16,33,57,6,67,131,3,8,66,13,158,65,142,34,199,192,201,127,164,11,101,6,213,32,110,19,48,7,31,15,227,3,2,3,242,43,55,53,199,11,203,1,156,18,237,25,170,32,114,13,129,2,146,1,45,81,218,21,67,18,177,17,12,118,75,5,188,27,32,10,130,13,182,10,34,8,13,109,167,74,194,21,182,82,3,74,101,23,13,5,197,82,76,198,181,13,220,33,80,8,194,4,14,8,39,6,204,60,196,17,110,163,217,0,0,2,215,0,236,3,238,8,185,72,184,9,113,79,67,224,155,37,44,22,95,9,248,3,197,7,12,29,118,12,134,13,113,10,35,34,123,84,153,8,6,26,113,48,198,29,83,6,68,1,191,141,192,7,83,19,89,117,178,19,155,17,125,27,47,86,148,5,235,5,200,19,56,72,7,137,173,19,13,12,134,8,64,2,182,11,146,36,183,30,96,8,237,129,43,13,25,200,0,32,170,15,239,17,122,6,216,28,89,2,62,42,17,31,80,80,52,16,246,26,69,46,234,22,234,38,67,3,9,31,129,111,222,47,168,67,154,6,201,12,245,20,21,129,70,129,0,16,21,248,42,63,17,40,27,179,12,231,149,125,13,47,38,185,18,37,61,204,20,148,6,188,17,94,4,48,10,18,97,61,12,69,7,59,41,192,10,160,105,170,83,13,2,212,39,156,7,33,16,44,48,142,90,83,71,112,2,9,156,200,63,78,2,168,49,133,10,191,37,76,20,28,53,211,48,87,43,192,59,242,92,125,34,227,111,232,14,25,45,143,21,150,208,25,52,83,12,25,10,99,35,51,62,114,52,62,8,202,7,6,72,155,3,18,70,15,47,243,1,31,0,0,81,51,100,233,38,124,70,184,13,239,91,201,94,115,19,47,30,105,5,166,23,0,120,118,45,24,107,209,4,217,40,241,74,87,58,133,44,237,0,195,30,114,11,3,22,166,29,60,2,248,7,172,69,2,33,231,1,141,16,26,14,67,84,0,5,148,5,191,0,221,39,182,21,203,10,38,23,104,13,99,34,170,31,72,30,122,34,239,0,58,31,114,26,191,1,139,3,126,11,134,57,194,88,226,8,134,150,184,4,117,17,203,49,16,18,154,24,156,29,101,41,114,53,21,39,233,22,114,112,64,43,210,129,3,129,0,16,7,190,25,170,12,128,0,117,37,140,54,117,46,28,8,126,14,41,47,9,16,123,42,192,70,248,125,205,2,121,11,9,6,126,116,108,27,238,23,220,8,28,37,103,56,44,77,173,36,79,20,63,0,131,17,62,0,230,81,179,62,215,1,81,65,168,1,181,1,59,3,171,10,28,5,213,36,139,36,21,68,161,2,4,159,73,3,45,3,20,81,203,3,187,27,206,74,193,37,177,8,88,3,65,29,217,196,36,13,2,32,175,27,134,21,72,13,61,58,26,3,176,54,198,80,233,42,173,16,166,37,46,10,200,77,70,105,69,1,197,16,9,98,86,40,120,59,148,13,199,3,99,26,247,26,249,102,142,6,18,3,72,4,218,2,86,51,49,2,15,9,21,18,157,11,89,13,247,15,201,36,177,13,250,0,0,69,188,37,238,37,180,0,115,39,34,4,75,17,168,185,136,59,238,46,236,82,20,40,26,30,208,38,232,29,175,8,219,32,98,23,20,16,98,15,159,10,217,68,70,7,193,3,123,14,94,49,97,10,145,23,83,60,11,82,214,24,50,18,213,21,74,9,36,7,90,2,129,0,16,34,155,63,231,20,23,19,63,21,96,3,10,17,71,86,23,31,163,4,254,9,203,75,205,21,251,100,60,0,152,38,144,6,52,89,194,14,115,11,209,45,77,89,187,14,192,69,158,7,183,22,216,26,222,68,85,62,78,113,114,135,100,0,36,29,11,2,224,29,113,4,112,10,72,31,105,7,72,14,134,117,59,32,15,5,146,0,145,22,19,92,128,118,117,26,126,36,241,65,177,67,48,123,82,15,26,16,165,50,178,40,7,40,50,93,247,78,216,119,216,2,178,0,0,13,121,10,4,14,127,46,14,4,96,39,102,31,212,3,86,34,182,24,204,40,94,6,177,27,179,2,254,33,241,44,45,5,11,45,3,25,176,21,92,9,36,20,254,31,73,9,94,19,238,21,255,89,102,13,66,7,125,30,58,38,29,36,168,54,1,15,71,106,58,55,211,115,111,6,24,17,130,24,204,111,70,112,45,26,77,0,58,36,243,0,230,13,16,54,252,29,30,48,109,54,182,24,87,15,119,107,8,12,11,25,129,10,172,18,199,38,252,39,187,21,37,29,254,59,137,112,140,12,201,58,80,129,19,129,0,16,26,190,15,227,49,219,96,248,47,192,232,210,33,158,10,45,87,239,2,92,4,47,76,193,10,205,21,193,38,219,26,137,104,157,2,78,169,36,40,175,10,123,66,217,100,28,15,122,60,247,54,245,8,11,12,197,35,4,22,134,28,155,35,45,3,90,11,28,17,231,68,255,91,30,7,184,117,8,3,251,103,175,2,100,59,255,1,52,7,77,0,201,16,120,58,208,2,226,0,0,13,10,57,34,73,83,11,143,23,22,43,68,205,254,4,116,41,82,15,139,14,127,74,98,3,84,37,5,1,55,55,232,5,50,175,45,82,160,16,230,60,185,0,133,3,32,9,52,66,177,7,243,13,115,128,80,74,228,85,52,22,97,55,236,51,78,146,33,2,172,29,197,2,57,30,192,57,213,42,17,98,169,18,185,45,182,26,199,7,124,7,24,0,53,36,118,63,148,7,67,26,81,10,65,19,95,33,0,34,40,71,245,181,85,62,200,13,97,79,136,8,45,4,37,52,242,62,120,123,200,1,210,87,170,36,70,1,163,81,43,62,244,16,172,81,8,8,88,12,237,5,91,61,1,33,134,129,29,129,0,16,29,145,13,88,45,210,16,17,16,248,4,138,14,54,28,45,20,244,26,23,10,253,68,146,112,27,29,68,3,0,10,110,6,243,17,90,0,0,65,134,14,79,29,183,2,188,75,26,45,20,64,52,166,173,57,83,42,85,3,156,173,84,5,164,20,91,43,74,48,106,68,154,53,64,145,175,70,60,65,113,36,146,9,219,5,151,13,199,43,185,26,159,72,9,10,234,47,9,6,211,104,56,31,88,30,32,33,245,3,52,1,228,39,51,172,48,80,246,49,72,62,23,48,226,12,33,80,69,67,162,31,190,29,134,29,96,68,124,106,54,105,85,85,206,0,41,2,80,65,197,166,100,35,101,11,174,22,118,51,175,86,208,9,225,7,42,35,198,84,72,17,216,127,206,18,128,25,242,58,176,9,46,13,100,15,160,17,177,15,82,44,178,36,154,5,33,9,159,34,3,45,80,1,205,8,59,59,88,74,209,24,26,79,161,0,170,28,241,46,12,5,0,125,79,4,99,44,238,0,236,15,68,16,73,53,156,11,144,12,134,104,148,21,206,46,112,1,137,16,131,110,127,15,70,10,1,129,101,129,0,16,44,9,28,80,39,226,7,38,83,112,40,222,99,19,29,16,14,251,0,6,5,220,35,143,28,192,24,106,108,253,0,160,2,140,67,138,21,32,12,23,2,77,0,242,68,201,25,124,28,202,12,17,155,145,12,93,5,166,8,72,23,164,41,213,61,4,36,252,60,224,80,103,25,208,2,122,2,139,37,14,94,152,58,112,73,160,12,63,13,237,81,57,28,115,6,9,14,131,11,155,30,143,19,68,47,97,2,192,17,148,3,160,2,240,110,59,36,115,2,83,4,66,22,147,48,18,12,101,12,187,105,96,65,143,44,24,13,101,8,252,14,158,11,158,44,253,0,21,19,221,10,61,147,204,122,91,0,235,3,0,4,176,45,91,14,224,27,126,48,31,27,109,0,0,13,186,96,119,32,185,16,199,39,136,18,133,16,102,26,161,26,27,10,16,111,190,9,128,21,210,14,208,5,121,64,235,54,144,25,38,0,97,2,187,37,75,38,142,69,25,7,33,23,29,23,124,49,47,102,25,47,220,148,148,73,195,9,209,3,246,4,140,40,160,11,238,7,145,75,114,5,153,27,95,8,34,129,18,103,16,80,101,125,119,15,86,51,152,114,37,1,167,82,147,7,58,105,156,13,81,2,111,1,240,66,180,46,186,34,96,44,12,71,32,28,158,35,134,15,241,45,68,54,234,6,156,6,237,39,95,58,41,0,0,84,223,0,131,159,34,21,7,55,45,54,31,66,200,38,70,14,113,5,190,32,164,12,192,8,49,17,10,38,6,4,122,7,49,51,183,6,62,96,128,39,0,13,94,76,91,17,252,31,237,7,107,93,84,16,252,143,255,36,2,2,74,28,155,11,235,34,67,23,126,77,190,30,116,61,172,0,56,8,231,120,50,36,96,47,17,73,39,13,89,45,238,21,176,12,164,4,147,30,109,1,8,2,158,17,130,57,224,46,122,18,9,3,181,22,162,74,104,125,59,14,144,46,6,80,107,20,193,20,4,21,42,46,57,110,211,7,58,72,109,4,64,8,179,13,99,15,109,9,211,32,65).map(_.toByte)
//      val ints = List(1,2,50).map(BigInt(_))
//      val expectedEncodedIntsBytes: Array[Byte] = Array(1,1,1,2,6,2,240).map(_.toByte)
      val sortedInts = ints.sorted
      val e = new BinaryPackingIntListEncoder(128)
      val encodedInts = e.encode(ints)
      val decodedInts = e.decode(new ByteArrayInputStream(encodedInts.toByteArray))
//      printBits(encodedInts.toByteArray)
      assert(encodedInts.toByteArray === expectedEncodedIntsBytes)
      assert(decodedInts === sortedInts)
    }
  }

  describe("VariableByteSignedIntEncoder") {
    it("writes integers to a bitwriter") {
      val bw = new BitWriter
      VariableByteSignedIntEncoder.write(bw, 500)
      VariableByteSignedIntEncoder.writeSigned(bw, -5)
      VariableByteSignedIntEncoder.write(bw, 270)
      bw.close

      val br = new BitReader(new ByteArrayInputStream(bw.toByteArray))
      assert(VariableByteSignedIntEncoder.read(br) === BigInt(500))
      assert(VariableByteSignedIntEncoder.readSigned(br) === BigInt(-5))
      assert(VariableByteSignedIntEncoder.read(br) === BigInt(270))
    }
  }
}
